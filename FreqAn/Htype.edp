load "UMFPACK64"
include "../LaminatedGeometry.idp"
include "../PlotInGMSH.idp"

plot(Th);
int coil=Th( (PosCoilIn+PosCoilOut)/2,PosCoilIn/4).region;
int lamin1=Th( PosCoilIn/2,1*LaminDepth/2).region;  
int lamin2=Th( PosCoilIn/2,3*LaminDepth/2).region;  
int lamin3=Th( PosCoilIn/2,5*LaminDepth/2).region;  
int lamin4=Th( PosCoilIn/2,7*LaminDepth/2).region;  
int lamin5=Th( PosCoilIn/2,9*LaminDepth/2).region;  
int airIn=Th( PosCoilIn-RadiusCoil/2,PosCoilIn-RadiusCoil/2).region;
int airOut=Th( 1.1*PosCoilOut,1.1*PosCoilOut).region;

real [int] lambda(12);
real RR;
real nu0=1e7/4/pi;
real nu1=1e4/4/pi;

func co = 1.0*(region==coil);
func yo = 1.0*(region==lamin1) +1.0*(region==lamin2) +1.0*(region==lamin3)
         +1.0*(region==lamin4) +1.0*(region==lamin5);
func ar = 1.0*(region==airIn)+1.0*(region==airOut)+1.0*(region==coil);
func sig=4e7*co+1e6*yo;
func rho=2.5e-8*co+1e-6*yo;
func nu=nu0*ar + nu1*yo;
func mu = 1/nu0*ar + 1/nu1*yo;

// --------------------------------
// Solving laplacian(u)=0
// J = -sigma * Grad(u)
// --------------------------------
fespace Ph(Th,P1);
Ph u,v;
macro Grad(u) [dx(u), dy(u)] //

solve Poisson(u,v, solver=CG)
	=int2d(Th) (sig * Grad(u)' * Grad(v))
	+on(CoilTerminalIn, u=0)
	+on(CoilTerminalOut, u=1);

fespace Eh(Th,RT0Ortho);
Eh [E0x,E0y] = Grad(u);

// ------------------------------------------------
// Eddy-Current Problem using modified A*
// curl(A')*nu*Curl(A) + jw*sigma*A*A'= sigma*E0*A'
// ------------------------------------------------
real freqf;
real mmm;

system("del LaminatedFreqAnalysisResults.txt");
ofstream gg("LaminatedFreqAnalysisResults.txt");

macro Curl(u,v) (dx(v)-dy(u)) //
macro CurlS(u) [dy(u),-dx(u)] //

freqf=0.1;

Ph<complex> H,Hp;
solve fana(H,Hp,solver=UMFPACK)
            =int2d(Th) (rho*CurlS(H)'*CurlS(Hp) +1i*2.*pi*freqf*mu*H*Hp)
            -int2d(Th) ( co*[E0x,E0y]'*CurlS(Hp))
            +on(AirOutTop,AirOutRight, H=0);
gmshScalarPlot("H",Th,real(H));
gmshScalarPlot("H",Th,imag(H));
Ph <complex> B = mu*H;
gmshScalarPlot("B",Th,real(B));
gmshScalarPlot("B",Th,imag(B));
Eh<complex> [Jex,Jey] = sig*CurlS(B);
gmshVectorPlot("E",Th,real(Jex),real(Jey));
gmshVectorPlot("E",Th,imag(Jex),imag(Jey));

system("graph.pos");