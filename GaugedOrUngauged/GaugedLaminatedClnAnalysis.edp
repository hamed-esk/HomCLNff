load "UMFPACK64"
include "../LaminatedGeometry.idp"

int coil=Th( (PosCoilIn+PosCoilOut)/2,PosCoilIn/4).region;
int lamin1=Th( PosCoilIn/2,1*LaminDepth/2).region;  
int lamin2=Th( PosCoilIn/2,3*LaminDepth/2).region;  
int lamin3=Th( PosCoilIn/2,5*LaminDepth/2).region;  
int lamin4=Th( PosCoilIn/2,7*LaminDepth/2).region;  
int lamin5=Th( PosCoilIn/2,9*LaminDepth/2).region;  
int airIn=Th( PosCoilIn-RadiusCoil/2,PosCoilIn-RadiusCoil/2).region;
int airOut=Th( 1.1*PosCoilOut,1.1*PosCoilOut).region;

real [int] lambda(22);
real RR;
real nu0=1e7/4/pi;
real nu1=1e4/4/pi;

func co = 1.0*(region==coil);
func yo = 1.0*(region==lamin1) +1.0*(region==lamin2) +1.0*(region==lamin3)
         +1.0*(region==lamin4) +1.0*(region==lamin5);
func ar = 1.0*(region==airIn)+1.0*(region==airOut)+1.0*(region==coil);
func sig=1e6*yo+4e7*co+0.1*ar;
func nu=nu0*ar + nu1*yo;

//plot(Th);

// --------------------------------
// Solving laplacian(phi)=0
// --------------------------------
fespace Ph(Th,P1);
Ph u,v;
macro Grad(u) [dx(u), dy(u)] //

solve Poisson(u,v, solver=UMFPACK)
	=int2d(Th) (sig * Grad(u)' * Grad(v))
	+on(CoilTerminalIn, u=1)
	+on(CoilTerminalOut, u=0);

fespace Eh(Th,RT0Ortho);
Eh [E0x,E0y] = Grad(u);
Eh [Esx, Esy];

// ------------------------------
// defining magnetostatic problem
// curl(A')*nu*Curl(A)=R*Crul(A')*T
// ------------------------------
fespace Xh(Th,[RT0Ortho,P1]);
Xh [Ax,Ay,p], [ax,ay,q];
problem mags([Ax,Ay,p], [ax,ay,q], solver=UMFPACK)
	= int2d(Th)( nu * (dx(ay)-dy(ax)) * (dx(Ay)-dy(Ax)) 
                + Grad(p)' * [ax,ay] + Grad(q)' * [Ax,Ay] )
	 -int2d(Th)( RR * sig * [ax,ay]' * [Esx,Esy] )
	 +on(CoilTerminalIn,CoilTerminalOut, Ax=0,Ay=0,p=0)
	 +on(AirInBot1,AirOutBot,AirOutLeft, Ax=0,Ay=0,p=0)
	 +on(Lamin1Left,Lamin2Left,Lamin3Left,Lamin4Left,Lamin5Left, Ax=0,Ay=0,p=0)
	 +on(AirInLeft1,AirInLeft2,AirInLeft3,AirInLeft4,AirInLeft5,AirInLeft6, Ax=0,Ay=0,p=0)
	 ;

// --------------------------------
// defining electrokinetic equation
// div( sig * (A+Grad(phi)) ) = 0
// --------------------------------
Ph pp,qq;
problem elek(pp, qq, solver=UMFPACK)
		=int2d(Th)(sig * Grad(qq)' * Grad(pp))
		-int2d(Th)(sig * Grad(qq)' * [Esx,Esy] )
		+on(Lamin1Left,Lamin2Left,Lamin3Left,Lamin4Left,Lamin5Left,pp=0)
		+on(CoilTerminalIn,CoilTerminalOut,pp=0)
		;

system("del LaminatedLamda.txt");
ofstream gg("LaminatedLamda.txt",append);
// -------------------------------------
// solving curl(nu*curl(A1)) = lambda[0]*sig*E0
// E2 = E0 - A1/lambda[1]
// -------------------------------------
[Esx,Esy]=[E0x,E0y];
lambda[0] = 1./int2d(Th)(sig  * [Esx, Esy]' * [Esx, Esy]);
cout <<"lambda[0] =  "<< lambda[0] << endl;
gg.scientific << lambda[0] << endl;
RR = lambda[0];

mags;
Eh [A1x,A1y] = [Ax,Ay];
lambda[1] = int2d(Th)(nu * (dx(A1y)-dy(A1x)) * (dx(A1y)-dy(A1x)));
cout <<"lambda[1] =  "<< lambda[1] << endl;
gg.scientific << lambda[1] << endl;

[Esx,Esy] = [A1x/lambda[1],A1y/lambda[1]];
elek;
Eh [E2x, E2y] = [E0x, E0y] - [A1x/lambda[1], A1y/lambda[1]] + Grad(pp);
lambda[2] = 1./int2d(Th)(sig * [E2x,E2y]' * [E2x,E2y]);
cout <<"lambda[2] =  "<< lambda[2] << endl; 
gg.scientific << lambda[2] << endl;

// -------------------------------------
// solving curl(nu*curl(A3t)) = lambda[2]*sig*E2
// A3 = A3t + A1
// E2 = A3/lambda[3] - E2
// -------------------------------------
[Esx, Esy] = [E2x, E2y];
RR = lambda[2];
mags;
Eh [A3x, A3y] = [Ax+A1x, Ay+A1y];

lambda[3] = int2d(Th)(nu * (dx(A3y)-dy(A3x)) * (dx(A3y)-dy(A3x)));
cout <<"lambda[3] =  "<< lambda[3] << endl;
gg.scientific << lambda[3] << endl;

[Esx,Esy] = [A3x/lambda[3],A3y/lambda[3]];
elek;
Eh [E4x, E4y] = [E2x, E2y] - [A3x/lambda[3], A3y/lambda[3]] + Grad(pp);
lambda[4] = 1./int2d(Th)(sig * [E4x,E4y]' * [E4x,E4y]);
cout <<"lambda[4] =  "<< lambda[4] << endl; 
gg.scientific << lambda[4] << endl;

// -------------------------------------
// solving curl(nu*curl(A5t)) = lambda[4]*sig*E4
// A5 = A5t + A3
// E6 = A5/lambda[5] - E4
// -------------------------------------
[Esx, Esy] = [E4x, E4y];
RR = lambda[4];
mags;
Eh [A5x, A5y] = [Ax+A3x, Ay+A3y];

lambda[5] = int2d(Th)(nu * (dx(A5y)-dy(A5x)) * (dx(A5y)-dy(A5x)));
cout <<"lambda[5] =  "<< lambda[5] << endl;
gg.scientific << lambda[5] << endl;

[Esx,Esy] = [A5x/lambda[5],A5y/lambda[5]];
elek;
Eh [E6x, E6y] = [E4x, E4y] - [A5x/lambda[5], A5y/lambda[5]] + Grad(pp);
lambda[6] = 1./int2d(Th)(sig * [E6x,E6y]' * [E6x,E6y]);
cout <<"lambda[6] =  "<< lambda[6] << endl; 
gg.scientific << lambda[6] << endl;


// -------------------------------------
// solving curl(nu*curl(A7t)) = lambda[6]*sig*E6
// A7 = A7t + A5
// E8 = A7/lambda[7] - E6
// -------------------------------------
[Esx, Esy] = [E6x, E6y];
RR = lambda[6];
mags;
Eh [A7x, A7y] = [Ax+A5x, Ay+A5y];

lambda[7] = int2d(Th)(nu * (dx(A7y)-dy(A7x)) * (dx(A7y)-dy(A7x)));
cout <<"lambda[7] =  "<< lambda[7] << endl;
gg.scientific << lambda[7] << endl;

[Esx,Esy] = [A7x/lambda[7],A7y/lambda[7]];
elek;
Eh [E8x, E8y] = [E6x, E6y] - [A7x/lambda[7], A7y/lambda[7]] + Grad(pp);
lambda[8] = 1./int2d(Th)(sig * [E8x,E8y]' * [E8x,E8y]);
cout <<"lambda[8] =  "<< lambda[8] << endl; 
gg.scientific << lambda[8] << endl;


// -------------------------------------
// solving curl(nu*curl(A9t)) = lambda[8]*sig*E8
// A9 = A9t + A7
// E10 = A9/lambda[9] - E8
// -------------------------------------
[Esx, Esy] = [E8x, E8y];
RR = lambda[8];
mags;
Eh [A9x, A9y] = [Ax+A7x, Ay+A7y];

lambda[9] = int2d(Th)(nu * (dx(A9y)-dy(A9x)) * (dx(A9y)-dy(A9x)));
cout <<"lambda[9] =  "<< lambda[9] << endl;
gg.scientific << lambda[9] << endl;

[Esx,Esy] = [A9x/lambda[9],A9y/lambda[9]];
elek;
Eh [E10x,E10y] = [E8x, E8y] - [A9x/lambda[9],A9y/lambda[9]] + Grad(pp);
lambda[10] = 1./int2d(Th)(sig * [E10x,E10y]' * [E10x,E10y]);
cout <<"lambda[10] =  "<< lambda[10] << endl; 
gg.scientific << lambda[10] << endl;


// -------------------------------------
// solving curl(nu*curl(A11t)) = lambda[10]*sig*E10
// A11 = A11t + A9
// E12 = A11/lambda[11] - E10
// -------------------------------------
[Esx, Esy] = [E10x, E10y];
RR = lambda[10];
mags;
Eh [A11x, A11y] = [Ax+A9x, Ay+A9y];

lambda[11] = int2d(Th)(nu * (dx(A11y)-dy(A11x)) * (dx(A11y)-dy(A11x)));
cout <<"lambda[11] =  "<< lambda[11] << endl;
gg.scientific << lambda[11] << endl;

[Esx,Esy] = [A11x/lambda[11],A11y/lambda[11]];
elek;
Eh [E12x,E12y] = [E10x, E10y] - [A11x/lambda[11],A11y/lambda[11]] + Grad(pp);
lambda[12] = 1./int2d(Th)(sig * [E12x,E12y]' * [E12x,E12y]);
cout <<"lambda[12] =  "<< lambda[12] << endl; 
gg.scientific << lambda[12] << endl;


// -------------------------------------
// --------PLOTTING THE RESULTS---------
// -------------------------------------
system("del graph.pos");
// macro for visualizing vectors in gmsh
macro gmshVectorPlot(name,Mh,Vx,Vy){
{
  ofstream ff("graph.pos",append);
  ff << "View \"" + name + "\" {" << endl;
  for (int i = 0; i < Mh.nv; i++) 
      ff << "VP(" << Mh(i).x  << "," << Mh(i).y << ", 0 "  << "){" << Vx(Mh(i).x,Mh(i).y) << "," << Vy(Mh(i).x,Mh(i).y) << ", 0 " << "};" << endl;
  ff << "};" << endl;
}
} //

// macro for visualizing scalars in gmsh
macro gmshScalarPlot(name,Mh,S){
{
  ofstream ff("graph.pos",append);
  ff << "View \"" + name + "\" {" << endl;
  for (int i = 0; i < Mh.nv; i++) 
      ff << "VP(" << Mh(i).x  << "," << Mh(i).y << ", 0 "  << "){0,0," << S(Mh(i).x,Mh(i).y) << "};" << endl;
  ff << "};" << endl;
}
} //


Eh [J0x,J0y] = sig*[E0x, E0y];
Eh [J2x,J2y] = yo*sig*[E2x, E2y];
Eh [J4x,J4y] = yo*sig*[E4x, E4y];
Eh [J6x,J6y] = yo*sig*[E6x, E6y];
Eh [J8x,J8y] = yo*sig*[E8x, E8y];
Eh [J10x,J10y] = yo*sig*[E10x, E10y];
Ph B1 = dx(A1y)-dy(A1x);
Ph B3 = dx(A3y)-dy(A3x);
Ph B5 = dx(A5y)-dy(A5x);
Ph B7 = dx(A7y)-dy(A7x);
Ph B9 = dx(A9y)-dy(A9x);
gmshVectorPlot("J0",Th,J0x,J0y);
gmshVectorPlot("J2",Th,J2x,J2y);
gmshVectorPlot("J4",Th,J4x,J4y);
gmshVectorPlot("J6",Th,J6x,J6y);
gmshVectorPlot("J8",Th,J8x,J8y);
gmshVectorPlot("J10",Th,J10x,J10y);
gmshVectorPlot("A1",Th,A1x,A1y);
gmshVectorPlot("A3",Th,A3x,A3y);
gmshVectorPlot("A5",Th,A5x,A5y);
gmshScalarPlot("B1",Th,B1);
gmshScalarPlot("B3",Th,B3);
gmshScalarPlot("B5",Th,B5);
gmshScalarPlot("B7",Th,B7);
gmshScalarPlot("B9",Th,B9);
