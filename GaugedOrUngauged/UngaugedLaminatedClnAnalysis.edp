load "UMFPACK64"
include "../LaminatedGeometry.idp"
include "../PlotInGMSH.idp"

int coil=Th( (PosCoilIn+PosCoilOut)/2,PosCoilIn/4).region;
int lamin1=Th( PosCoilIn/2,1*LaminDepth/2).region;  
int lamin2=Th( PosCoilIn/2,3*LaminDepth/2).region;  
int lamin3=Th( PosCoilIn/2,5*LaminDepth/2).region;  
int lamin4=Th( PosCoilIn/2,7*LaminDepth/2).region;  
int lamin5=Th( PosCoilIn/2,9*LaminDepth/2).region;  
int airIn=Th( PosCoilIn-RadiusCoil/2,PosCoilIn-RadiusCoil/2).region;
int airOut=Th( 1.1*PosCoilOut,1.1*PosCoilOut).region;

int numStages = 5;
real [int] lambda(2*numStages+1);
real RR;
real nu0=1e7/4/pi;
real nu1=1e4/4/pi;

func co = 1.0*(region==coil);
func yo = 1.0*(region==lamin1) +1.0*(region==lamin2) +1.0*(region==lamin3)
         +1.0*(region==lamin4) +1.0*(region==lamin5);
func ar = 1.0*(region==airIn)+1.0*(region==airOut)+1.0*(region==coil);
func sig=1e6*yo+4e7*co;
func nu=nu0*ar + nu1*yo;

//plot(Th);

// --------------------------------
// Solving laplacian(phi)=0
// --------------------------------
fespace Ph(Th,P1);
Ph u,v;
macro Grad(u) [dx(u), dy(u)] //

solve Poisson(u,v, solver=CG)
	=int2d(Th) ( 4e7*co * Grad(u)' * Grad(v))
	+on(CoilTerminalIn, u=1)
	+on(CoilTerminalOut, u=0);

fespace Eh(Th,RT0Ortho);
Eh [Esx, Esy];
Eh [E0x,E0y] = Grad(u);


// --------------------------------
// defining RHS4 method:  curl(T')*curl(T)=curl(T')*J0
// --------------------------------
macro Curl(Ax, Ay, Az) [dy(Az)-dz(Ay), dz(Ax)-dx(Az), dx(Ay)-dy(Ax)] //
varf rhs4(Tz, tz)
	= int2d(Th)( [dy(tz),-dx(tz)]' * [dy(Tz),-dx(Tz)])
	 -int2d(Th)( sig * [dy(tz),-dx(tz)]' * [Esx, Esy] )
	 +on(AirOutTop,AirOutRight,Tz=0);
matrix<real> Krhs4=rhs4(Ph,Ph,tgv=1e30,solver=CG,eps=1e-10);
// ------------------------------
// defining magnetostatic problem
// curl(A')*nu*Curl(A)=R*Crul(A')*T
// ------------------------------
Ph Tz;
varf mags([Ax,Ay], [ax,ay])
	= int2d(Th)( nu * (dx(ay)-dy(ax)) * (dx(Ay)-dy(Ax)) )
	 -int2d(Th)( RR * (dx(ay)-dy(ax)) * Tz )
	 +on(CoilTerminalIn,CoilTerminalOut, Ax=0,Ay=0)
	 +on(AirInBot1,AirOutBot,AirOutLeft, Ax=0,Ay=0)
	 +on(Lamin1Left,Lamin2Left,Lamin3Left,Lamin4Left,Lamin5Left, Ax=0,Ay=0)
	 +on(AirInLeft1,AirInLeft2,AirInLeft3,AirInLeft4,AirInLeft5,AirInLeft6, Ax=0,Ay=0)
	 ;
matrix<real> Kmags = mags(Eh,Eh,tgv=1e30,solver=CG);

// --------------------------------
// defining electrokinetic equation
// div( sig * (A+Grad(phi)) ) = 0
// --------------------------------
Ph pp;
varf elek(pp, qq)
		=int2d(Th)( sig * Grad(qq)' * Grad(pp))
		-int2d(Th)( sig * Grad(qq)' * [Esx,Esy] )
		+on(Lamin1Left,Lamin2Left,Lamin3Left,Lamin4Left,Lamin5Left,pp=0)
		+on(CoilTerminalIn,CoilTerminalOut,pp=0)
		;
matrix<real> Kelek = elek(Ph,Ph,solver=CG,eps=1e-10);

system("del LaminatedLamda.txt");
ofstream gg("LaminatedLamda.txt",append);

Eh [Ax,Ay];
Eh[int] [Enx,Eny](numStages+1);
Eh[int] [Anx,Any](numStages);
[Enx[0],Eny[0]] = Grad(u);

real[int] Frhs4(Ph.ndof);
real[int] ansRhs4(Ph.ndof);
real[int] Fmags(Eh.ndof);
real[int] ansMags(Eh.ndof);
real[int] Felek(Ph.ndof);
real[int] ansElek(Ph.ndof);

for (int stage=0; stage<numStages; stage++)
{
	[Esx,Esy] = [Enx[stage],Eny[stage]];
	lambda[2*stage] = 1./int2d(Th)(sig  * [Esx, Esy]' * [Esx, Esy]);
	gg.scientific << lambda[2*stage] << endl;
	cout <<"R"<< 2*stage <<" = "<< lambda[2*stage] << endl;
	RR = lambda[2*stage];
	Frhs4 = rhs4(0,Ph);
	ansRhs4 = Krhs4^-1*Frhs4;
	Tz[] = -ansRhs4;
	Fmags = mags(0,Eh);
	ansMags = Kmags^-1*Fmags;
	Ax[] = -ansMags;
	if (stage==0){
		[Anx[0],Any[0]] = [Ax,Ay];
	}
	else{
		[Anx[stage],Any[stage]] = [Anx[stage-1]+Ax,Any[stage-1]+Ay];
	}
	lambda[2*stage+1] = int2d(Th)(nu * (dx(Any[stage])-dy(Anx[stage])) * (dx(Any[stage])-dy(Anx[stage])));
	gg.scientific << lambda[2*stage+1] << endl;
	cout <<"L" << 2*stage+1 <<" = "<< lambda[2*stage+1] << endl;
	[Esx,Esy] = [Anx[stage]/lambda[2*stage+1],Any[stage]/lambda[2*stage+1]];
	Felek = elek(0,Ph);
	ansElek = Kelek^-1*Felek;
	pp[] = -ansElek;
	[Enx[stage+1], Eny[stage+1]] = [Enx[stage], Eny[stage]] - [Anx[stage]/lambda[2*stage+1], Any[stage]/lambda[2*stage+1]] + Grad(pp);
}


// -------------------------------------
// --------PLOTTING THE RESULTS---------
// -------------------------------------
/*
system("del graph.pos");

for (int stage=0; stage<numStages; stage++)
{
	Eh [J0x,J0y] = sig*[Enx[stage], Eny[stage]];
	gmshVectorPlot("J"+2*stage,Th,J0x,J0y);
	gmshVectorPlot("A"+(2*stage+1),Th,Anx[stage],Any[stage]);
}
*/