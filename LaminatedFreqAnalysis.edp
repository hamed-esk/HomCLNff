load "UMFPACK64"
include "LaminatedGeometry.idp"
//plot(Th);
int coil=Th( (PosCoilIn+PosCoilOut)/2,PosCoilIn/4).region;
int lamin1=Th( PosCoilIn/2,1*LaminDepth/2).region;  
int lamin2=Th( PosCoilIn/2,3*LaminDepth/2).region;  
int lamin3=Th( PosCoilIn/2,5*LaminDepth/2).region;  
int lamin4=Th( PosCoilIn/2,7*LaminDepth/2).region;  
int lamin5=Th( PosCoilIn/2,9*LaminDepth/2).region;  
int airIn=Th( PosCoilIn-RadiusCoil/2,PosCoilIn-RadiusCoil/2).region;
int airOut=Th( 1.1*PosCoilOut,1.1*PosCoilOut).region;

real [int] lambda(12);
real RR;
real nu0=1e7/4/pi;
real nu1=1e4/4/pi;

func co = 1.0*(region==coil);
func yo = 1.0*(region==lamin1) +1.0*(region==lamin2) +1.0*(region==lamin3)
         +1.0*(region==lamin4) +1.0*(region==lamin5);
func ar = 1.0*(region==airIn)+1.0*(region==airOut)+1.0*(region==coil);
func sig=4e7*co+1e6*yo+0.1*ar;
func nu=nu0*ar + nu1*yo;

// --------------------------------
// Solving laplacian(u)=0
// J = -sigma * Grad(u)
// --------------------------------
fespace Ph(Th,P1);
Ph u,v;
macro Grad(u) [dx(u), dy(u)] //

solve Poisson(u,v, solver=UMFPACK)
	=int2d(Th) (sig * Grad(u)' * Grad(v))
	+on(CoilTerminalIn, u=0)
	+on(CoilTerminalOut, u=1);

fespace Eh(Th,RT0Ortho);
Eh [E0x,E0y] = Grad(u);

// ------------------------------------------------
// Eddy-Current Problem using modified A*
// curl(A')*nu*Curl(A) + jw*sigma*A*A'= sigma*E0*A'
// ------------------------------------------------
real freqf;
real mmm;

fespace Mh(Th,P0);
Mh sig0 = sig;

system("del LaminatedFreqAnalysisResults.txt");
ofstream gg("LaminatedFreqAnalysisResults.txt");
Eh<complex> [Ax,Ay], [ax,ay];
for(mmm=0;mmm<=50;mmm=mmm+1){
    freqf=10^(-1+mmm*7/50); //sweepting 1e-2 to 1e6 with logaritmic spacing
    solve mags([Ax,Ay], [ax,ay],solver=UMFPACK)
        = int2d(Th)( nu * (dx(ay)-dy(ax)) * (dx(Ay)-dy(Ax)) 
                    + 1i*2*pi*freqf*sig* [ax,ay]' * [Ax,Ay] )
        -int2d(Th)( sig * [ax,ay]' * [E0x,E0y] )
        +on(CoilTerminalIn,CoilTerminalOut, Ax=0,Ay=0)
        +on(AirInBot1,AirOutBot,AirOutLeft, Ax=0,Ay=0)
        +on(Lamin1Left,Lamin2Left,Lamin3Left,Lamin4Left,Lamin5Left, Ax=0,Ay=0)
        +on(AirInLeft1,AirInLeft2,AirInLeft3,AirInLeft4,AirInLeft5,AirInLeft6, Ax=0,Ay=0)
        ;
    Eh<complex> [Jx,Jy] = sig*( [E0x,E0y] - 1i*2*pi*freqf*[Ax,Ay] );
    complex I = int1d(Th,CoilTerminalIn)(Jy);
    //complex I2 = int2d(Th)(sig0*[conj(Ax),conj(Ay)]'*[E0x,E0y]);
    cout << "freq=" << freqf << endl;
    cout << "Re(Y)=" << real(I) <<endl;
    cout << "L=Im(1/Y)/w=" << imag(1/I)/(2*pi*freqf) << endl;
    gg.scientific << freqf << " " << real(I) << " " << imag(1/I)/(2*pi*freqf) << endl;
}
    //plot([Jx,Jy],wait=1);
