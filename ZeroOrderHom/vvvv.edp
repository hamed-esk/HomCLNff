load "UMFPACK64"
include "../HomogenizedGeometry.idp"
include "../PlotInGMSH.idp"
//plot(Th,wait=1);

int coil=Th( (PosCoilIn+PosCoilOut)/2,PosCoilIn/4).region;
int lamin=Th( PosCoilIn/2,PosCoilIn/2).region;  
int airIn=Th( PosCoilIn-RadiusCoil/2,PosCoilIn-RadiusCoil/2).region;
int airOut=Th( 1.1*PosCoilOut,1.1*PosCoilOut).region;

real [int] lambda(12);
real RR;
real nu0=1e7/4/pi;
real nu1=1e4/4/pi;
real InsRatio = 0.9;

func co = 1.0*(region==coil);
func yo = 1.0*(region==lamin);
func ar = 1.0*(region==airIn)+1.0*(region==airOut)+1.0*(region==coil);
func sig=4e7*co; //
func sigLam=1e6*(1e-3)^2*yo;
func nu=nu0*ar + nu1/InsRatio*yo;

// ------------------------
// Solving laplacian(u)=0
// J = -sigma * Grad(u)
// ------------------------
fespace Ph(Th,P1);
Ph u,v;
macro Grad(u) [dx(u), dy(u)] //

solve Poisson(u,v,solver=CG)
	=int2d(Th) ( 4e7*co * Grad(u)' * Grad(v))
	+on(CoilTerminalIn, u=0)
	+on(CoilTerminalOut, u=1);

fespace Eh(Th,RT0Ortho);
Eh [E0x,E0y] = Grad(u);
Eh<complex> [Jx,Jy];

Ph Tz,tz;
solve rhs4(Tz, tz, solver=CG)
	=int2d(Th)( [dy(tz),-dx(tz)]' * [dy(Tz),-dx(Tz)])
	-int2d(Th)( sig * [dy(tz),-dx(tz)]' * [E0x, E0y] )
	+on(AirOutTop,AirOutRight,Tz=0);

real freqf;
real mmm=0;
system("del HomogenizedFreqAnalysisResults.txt");
ofstream gg("HomogenizedFreqAnalysisResults.txt");

macro Curl(u,v) (dx(v)-dy(u)) //

fespace Xh(Th,[RT0Ortho,P1]);
Xh<complex> [A0x,A0y,ph0];
Xh<complex> [a0x,a0y,qh0];
freqf=0.001;
varf fana([A0x,A0y,ph0],[a0x,a0y,qh0])
            =int2d(Th) (nu*Curl(A0x,A0y) * Curl(a0x,a0y)
                    +1i*2.*pi*freqf* sig * Grad(ph0)'*[a0x,a0y] 
                    +1i*2.*pi*freqf* sig * Grad(qh0)'*[A0x,A0y]
                    +1i*2.*pi*freqf* sig * [A0x,A0y]' * [a0x,a0y]
                    +1i*2.*pi*freqf* 1./12. * sigLam * Curl(A0x,A0y) * Curl(a0x,a0y)
                    + sig * Grad(ph0)' * Grad(qh0)
                    )
            +int2d(Th) ( Tz * Curl(a0x,a0y))
            +on(CoilTerminalIn,CoilTerminalOut, A0x=0,A0y=0,ph0=0)
            +on(AirInBot,AirOutBot,AirInLeft,AirOutLeft, A0x=0,A0y=0,ph0=0)
            +on(LaminLeft,LaminBot, A0x=0,A0y=0,ph0=0)
    ;
matrix <complex> Km = fana(Xh,Xh,solver=GMRES,eps=0.001);
complex[int] Bm = fana(0,Xh);
A0x[]=Km^-1*Bm;
//Bm = Km*A0x[];
//complex I =conj(A0x[]'*Bm);
[Jx,Jy] = (sig)*( [E0x,E0y] - 1i*2.*pi*freqf*([A0x,A0y]-Grad(ph0)) );
complex I = int1d(Th,CoilTerminalIn)(Jy);
cout << "I" << I << endl;
cout << "BmAm" << conj(A0x[]'*Bm) << endl;
cout << "freq=" << freqf << endl;
cout << "Re(Y)=" << 1./real(I) << endl;
cout << "L=Im(1/Y)/w=" << imag(1./I)/(2.*pi*freqf) << endl;

/*
for(mmm=0;mmm<=50;mmm=mmm+1){
    freqf=10^(-1+mmm*7/50); //sweepting 1e-1 to 1e6 with logaritmic spacing
    solve fana([A0x,A0y,A2x,A2y],[a0x,a0y,a2x,a2y],solver=UMFPACK)
            =int2d(Th) (nu*Curl(A0x,A0y) * Curl(a0x,a0y)
                    +1./5.*nu* Curl(A2x,A2y) * Curl(a2x,a2y)
                    +1i*2.*pi*freqf* sig * [A0x,A0y]' * [a0x,a0y]
                    +1i*2.*pi*freqf* 1./12. * sigLam * Curl(A0x,A0y) * Curl(a0x,a0y)
                    -1i*2.*pi*freqf* 1./60. * sigLam * Curl(A0x,A0y) * Curl(a2x,a2y)
                    -1i*2.*pi*freqf* 1./60. * sigLam * Curl(A2x,A2y) * Curl(a0x,a0y)
                    +1i*2.*pi*freqf* 1./210.* sigLam * Curl(A2x,A2y) * Curl(a2x,a2y)
                    )
            -int2d(Th) ( sig * [E0x,E0y,0,0]' * [a0x,a0y,a2x,a2y])
            +on(CoilTerminalIn,CoilTerminalOut, A0x=0,A0y=0,A2x=0,A2y=0)
            +on(AirInBot,AirOutBot,AirInLeft,AirOutLeft, A0x=0,A0y=0,A2x=0,A2y=0)
            +on(LaminLeft,LaminBot, A0x=0,A0y=0,A2x=0,A2y=0)
    ;
    [Jx,Jy] = sig*( [E0x,E0y] - 1i*2*pi*freqf*[A0x,A0y] );
    complex I = int1d(Th,CoilTerminalIn)(Jy);
    cout << "freq=" << freqf << endl;
    cout << "Re(Y)=" << real(I) << endl;
    cout << "L=Im(1/Y)/w=" << imag(1/I)/(2*pi*freqf) << endl;
    gg.scientific.showpos << freqf << " " << real(I) << " " << imag(1/I)/(2*pi*freqf) << endl;
}
*/

system("del graph.pos");
Eh [reA0x,reA0y] = [real(A0x),real(A0y)];
Eh [imA0x,imA0y] = [imag(A0x),imag(A0y)];
gmshVectorPlot("reA00",Th,reA0x,reA0y);
gmshVectorPlot("imA00",Th,imA0x,imA0y);
gmshScalarPlot("ph0",Th,real(ph0));
gmshScalarPlot("ph0",Th,imag(ph0));
Ph reB = Curl(reA0x,reA0y);
gmshScalarPlot("reB",Th,reB);